name: Sync to Gitee (Code + Releases)

on:
  # push:             # main分支提交代码即触发
  #   branches:
  #     - main
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '5 0 * * *'  # 每天凌晨0:05执行
  release:           # release发布时触发
    types: [published]

env:
  # 仓库名称
  REPO_NAME: ${{ github.event.repository.name }}
  GITHUB_REPO: cmontage/mas-cn
  GITEE_REPO: cmontage/mas-cn

jobs:
  # 同步代码仓库
  mirror-to-gitee:
    name: 同步代码到Gitee
    runs-on: ubuntu-latest

    steps:
      - name: 配置Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 同步到Gitee
        uses: abersheeran/sync-gitee-mirror@v1-beta
        with:
          repository: cmontage/${{ env.REPO_NAME }}
          username: cmontage
          password: ${{ secrets.GITEE_PASSWORD }}

  # 同步Release到Gitee
  sync-release-to-gitee:
    name: 同步Release到Gitee
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: mirror-to-gitee

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取Release信息
        id: release
        run: |
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "name=${{ github.event.release.name }}" >> $GITHUB_OUTPUT
          echo "body=" >> $GITHUB_OUTPUT
          echo "prerelease=${{ github.event.release.prerelease }}" >> $GITHUB_OUTPUT
          echo "draft=${{ github.event.release.draft }}" >> $GITHUB_OUTPUT

      - name: 检查Gitee上是否已存在该Release
        id: check_gitee_release
        run: |
          gitee_token="${{ secrets.GITEE_PASSWORD }}"
          tag_name="${{ steps.release.outputs.tag_name }}"
          
          if [ -z "$gitee_token" ]; then
            echo "错误: 未设置 GITEE_PASSWORD secret"
            exit 1
          fi
          
          echo "检查Gitee上是否存在Release: $tag_name"
          
          # 检查特定tag的release是否存在
          response=$(curl -s -w "%{http_code}" \
            "https://gitee.com/api/v5/repos/${{ env.GITEE_REPO }}/releases/tags/$tag_name?access_token=$gitee_token" \
            -o gitee_release_check.json)
          
          http_code="${response: -3}"
          
          if [ "$http_code" = "200" ]; then
            # 检查响应内容是否为null或空（表示标签存在但没有release）
            response_content=$(cat gitee_release_check.json)
            if [ "$response_content" = "null" ] || [ -z "$response_content" ] || [ "$response_content" = "{}" ]; then
              echo "标签存在但无Release: $tag_name，需要创建Release"
              echo "release_exists=false" >> $GITHUB_OUTPUT
              echo "need_update=false" >> $GITHUB_OUTPUT
            else
              echo "Gitee上已存在Release: $tag_name"
              echo "release_exists=true" >> $GITHUB_OUTPUT
              
              # 获取现有release信息
              release_id=$(jq -r '.id' gitee_release_check.json)
              echo "existing_release_id=$release_id" >> $GITHUB_OUTPUT
              echo "现有Release ID: $release_id"
              
              # 检查是否需要更新（比较标题内容）
              existing_name=$(jq -r '.name' gitee_release_check.json)
              current_name="${{ steps.release.outputs.name }}"
            
            if [ "$existing_name" != "$current_name" ]; then
              echo "Release标题有更新，需要删除并重新创建"
              echo "need_update=true" >> $GITHUB_OUTPUT
            else
              echo "Release标题相同，无需更新"
              echo "need_update=false" >> $GITHUB_OUTPUT
            fi
              echo "need_update=false" >> $GITHUB_OUTPUT
            fi
            
          elif [ "$http_code" = "404" ]; then
            echo "Gitee上不存在该Release，需要创建"
            echo "release_exists=false" >> $GITHUB_OUTPUT
            echo "need_update=false" >> $GITHUB_OUTPUT
          else
            echo "检查Gitee Release时出错，HTTP状态码: $http_code"
            cat gitee_release_check.json
            exit 1
          fi
          
          # 清理临时文件
          rm -f gitee_release_check.json

      - name: 下载Release资源
        id: download_assets
        if: steps.check_gitee_release.outputs.release_exists == 'false' || steps.check_gitee_release.outputs.need_update == 'true'
        run: |
          mkdir -p assets
          release_id="${{ github.event.release.id }}"
          
          # 获取assets信息
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ env.GITHUB_REPO }}/releases/${release_id}/assets" > assets.json
          
          # 下载每个asset
          jq -r '.[] | "\(.browser_download_url) \(.name)"' assets.json | while read url name; do
            echo "下载: $name"
            curl -L -o "assets/$name" "$url"
          done
          
          # 输出asset列表供后续步骤使用
          jq -r '.[].name' assets.json | tr '\n' ',' | sed 's/,$//' > asset_names.txt
          echo "asset_names=$(cat asset_names.txt)" >> $GITHUB_OUTPUT

      - name: 创建或更新Gitee Release
        if: steps.check_gitee_release.outputs.release_exists == 'false' || steps.check_gitee_release.outputs.need_update == 'true'
        run: |
          # 获取Gitee Access Token
          gitee_token="${{ secrets.GITEE_PASSWORD }}"
          
          if [ -z "$gitee_token" ]; then
            echo "错误: 未设置 GITEE_PASSWORD secret"
            exit 1
          fi
          
          # 准备release数据
          tag_name="${{ steps.release.outputs.tag_name }}"
          release_name="${{ steps.release.outputs.name }}"
          release_body="${{ steps.release.outputs.body }}"
          prerelease="${{ steps.release.outputs.prerelease }}"
          
          # 转义JSON字符串
          release_body_escaped=$(echo "$release_body" | jq -Rs .)
          release_name_escaped=$(echo "$release_name" | jq -Rs .)
          
          # 如果Release已存在，先删除它
          if [ "${{ steps.check_gitee_release.outputs.release_exists }}" = "true" ]; then
            echo "删除现有的Gitee Release: $tag_name"
            existing_release_id="${{ steps.check_gitee_release.outputs.existing_release_id }}"
            
            delete_response=$(curl -X DELETE \
              "https://gitee.com/api/v5/repos/${{ env.GITEE_REPO }}/releases/$existing_release_id?access_token=$gitee_token")
            echo "删除结果: $delete_response"
          fi
          
          # 创建新的release
          echo "创建新的Gitee Release: $tag_name"
          
          # 创建release的JSON数据
          release_data="{
            \"tag_name\": \"$tag_name\",
            \"name\": $release_name_escaped,
            \"body\": $release_body_escaped,
            \"prerelease\": $prerelease,
            \"target_commitish\": \"main\"
          }"
          
          # 创建release
          response=$(curl -X POST \
            "https://gitee.com/api/v5/repos/${{ env.GITEE_REPO }}/releases?access_token=$gitee_token" \
            -H "Content-Type: application/json" \
            -d "$release_data")
          
          echo "Gitee API响应: $response"
          
          # 检查是否创建成功
          release_id=$(echo "$response" | jq -r '.id // empty')
          if [ -z "$release_id" ] || [ "$release_id" = "null" ]; then
            echo "创建Gitee Release失败"
            echo "$response" | jq .
            exit 1
          fi
          
          echo "Gitee Release创建成功，ID: $release_id"
          echo "gitee_release_id=$release_id" >> $GITHUB_ENV

      - name: 跳过同步提示
        if: steps.check_gitee_release.outputs.release_exists == 'true' && steps.check_gitee_release.outputs.need_update == 'false'
        run: |
          echo "Gitee上已存在相同的Release: ${{ steps.release.outputs.tag_name }}"
          echo "内容无变化，跳过同步"

      - name: 上传资源到Gitee Release
        if: (steps.check_gitee_release.outputs.release_exists == 'false' || steps.check_gitee_release.outputs.need_update == 'true') && steps.download_assets.outputs.asset_names != ''
        run: |
          gitee_token="${{ secrets.GITEE_PASSWORD }}"
          release_id="${{ env.gitee_release_id }}"
          
          # 上传每个asset
          for asset_file in assets/*; do
            if [ -f "$asset_file" ]; then
              asset_name=$(basename "$asset_file")
              echo "上传资源到Gitee: $asset_name"
              
              curl -X POST \
                "https://gitee.com/api/v5/repos/${{ env.GITEE_REPO }}/releases/${release_id}/attach_files?access_token=$gitee_token" \
                -F "file=@$asset_file"
              
              echo "已上传: $asset_name"
            fi
          done

      - name: 清理临时文件
        if: steps.check_gitee_release.outputs.release_exists == 'false' || steps.check_gitee_release.outputs.need_update == 'true'
        run: |
          rm -rf assets
          rm -f assets.json asset_names.txt

  # 定时同步所有缺失的Release
  sync-missing-releases:
    name: 同步缺失的Release到Gitee
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs: mirror-to-gitee

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取所有GitHub Releases
        id: get_releases
        run: |
          echo "获取GitHub Release列表..."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ env.GITHUB_REPO }}/releases?per_page=10" \
               > github_releases.json
          
          release_count=$(jq length github_releases.json)
          echo "找到 $release_count 个Release"
          echo "release_count=$release_count" >> $GITHUB_OUTPUT

      - name: 同步缺失的Release
        if: steps.get_releases.outputs.release_count > 0
        run: |
          gitee_token="${{ secrets.GITEE_PASSWORD }}"
          
          if [ -z "$gitee_token" ]; then
            echo "错误: 未设置 GITEE_PASSWORD secret"
            exit 1
          fi
          
          echo "开始检查和同步缺失的Release..."
          sync_count=0
          
          # 处理每个release
          jq -c '.[]' github_releases.json | while read release; do
            tag_name=$(echo "$release" | jq -r '.tag_name')
            release_name=$(echo "$release" | jq -r '.name')
            release_body=""  # 不同步描述内容
            prerelease=$(echo "$release" | jq -r '.prerelease')
            draft=$(echo "$release" | jq -r '.draft')
            
            # 跳过草稿版本
            if [ "$draft" = "true" ]; then
              echo "跳过草稿版本: $tag_name"
              continue
            fi
            
            echo ""
            echo "=== 检查Release: $tag_name ==="
            
            # 检查Gitee上是否已存在此Release
            echo "检查Release: $tag_name"
            response=$(curl -s -w "%{http_code}" \
              "https://gitee.com/api/v5/repos/${{ env.GITEE_REPO }}/releases/tags/$tag_name?access_token=$gitee_token" \
              -o "gitee_check_$tag_name.json")
            
            http_code="${response: -3}"
            
            if [ "$http_code" = "200" ]; then
              # 检查响应内容是否为null或空（表示标签存在但没有release）
              response_content=$(cat "gitee_check_$tag_name.json")
              if [ "$response_content" = "null" ] || [ -z "$response_content" ] || [ "$response_content" = "{}" ]; then
                echo "→ 标签存在但无Release: $tag_name，需要创建Release"
                release_exists="false"
              else
                echo "✓ Gitee上已存在Release: $tag_name"
                rm -f "gitee_check_$tag_name.json"
                continue
              fi
            elif [ "$http_code" = "404" ]; then
              echo "→ Gitee上不存在标签或Release: $tag_name"
              release_exists="false"
            else
              echo "✗ 检查Release时出错: $tag_name (HTTP: $http_code)"
              continue
            fi
            
            # 准备release数据
            release_body_escaped=$(echo "$release_body" | jq -Rs .)
            release_name_escaped=$(echo "$release_name" | jq -Rs .)
            
            # 创建Release数据
            release_data="{
              \"tag_name\": \"$tag_name\",
              \"name\": $release_name_escaped,
              \"body\": $release_body_escaped,
              \"prerelease\": $prerelease,
              \"target_commitish\": \"main\"
            }"
            
            echo "创建Gitee Release: $tag_name"
            api_response=$(curl -X POST \
              "https://gitee.com/api/v5/repos/${{ env.GITEE_REPO }}/releases?access_token=$gitee_token" \
              -H "Content-Type: application/json" \
              -d "$release_data")
            
            # 检查创建结果
            new_release_id=$(echo "$api_response" | jq -r '.id // empty')
            if [ -z "$new_release_id" ] || [ "$new_release_id" = "null" ]; then
              echo "✗ 创建失败: $tag_name"
              echo "API响应: $api_response"
              
              # 检查是否是因为标签不存在
              if echo "$api_response" | grep -q "标签不存在"; then
                echo "提示: 标签 $tag_name 可能还未同步到Gitee"
              fi
            else
              echo "✓ 创建成功: $tag_name (ID: $new_release_id)"
              sync_count=$((sync_count + 1))
              
              # 处理附件（如果有）
              assets_count=$(echo "$release" | jq '.assets | length')
              if [ "$assets_count" -gt 0 ]; then
                echo "  处理 $assets_count 个附件..."
                mkdir -p "assets_$tag_name"
                
                echo "$release" | jq -c '.assets[]' | while read asset; do
                  asset_name=$(echo "$asset" | jq -r '.name')
                  download_url=$(echo "$asset" | jq -r '.browser_download_url')
                  
                  echo "    下载: $asset_name"
                  if curl -L -o "assets_$tag_name/$asset_name" "$download_url"; then
                    echo "    上传: $asset_name"
                    curl -X POST \
                      "https://gitee.com/api/v5/repos/${{ env.GITEE_REPO }}/releases/$new_release_id/attach_files?access_token=$gitee_token" \
                      -F "file=@assets_$tag_name/$asset_name"
                  else
                    echo "    下载失败: $asset_name"
                  fi
                done
                
                rm -rf "assets_$tag_name"
              fi
            fi
            
            # 清理临时文件
            rm -f "gitee_check_$tag_name.json"
            
            # 添加延迟避免API限流
            sleep 3
          done
          
          echo ""
          echo "=== 同步完成 ==="
          if [ "$sync_count" -gt 0 ]; then
            echo "成功同步 $sync_count 个Release"
          else
            echo "没有需要同步的Release"
          fi

      - name: 清理临时文件
        if: always()
        run: |
          rm -f github_releases.json
          rm -f gitee_check_*.json
          rm -rf assets_*