name: Repo Sync to Gitee

on:
  # push:             # main分支提交代码即触发
  #   branches:
  #     - main
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '5 0 * * *'

env:
  # 仓库名称
  REPO_NAME: ${{ github.event.repository.name }}
  GITHUB_REPO: cmontage/mas-cn
  GITEE_REPO: cmontage/mas-cn

jobs:
  # 同步代码仓库
  mirror-to-gitee:
    name: 同步代码到Gitee
    runs-on: ubuntu-latest

    steps:
      - name: 配置Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 同步到Gitee
        uses: abersheeran/sync-gitee-mirror@v1-beta
        with:
          repository: cmontage/${{ env.REPO_NAME }}
          username: cmontage
          password: ${{ secrets.GITEE_PASSWORD }}

  # 同步Releases
  # sync-releases:
  #   name: 同步Releases到Gitee
  #   runs-on: ubuntu-latest
  #   needs: mirror-to-gitee
    
  #   steps:
  #     - name: 检出代码
  #       uses: actions/checkout@v3

  #     - name: 安装依赖
  #       run: |
  #         pip install requests
          
  #     - name: 同步GitHub Releases到Gitee
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUBAPI_TOKEN }}
  #         GITEE_TOKEN: ${{ secrets.GITEE_PASSWORD }}
  #         GITEE_USERNAME: cmontage
  #       run: |
  #         cat > sync_releases.py << 'EOF'
  #         import os
  #         import json
  #         import requests
  #         import time
          
  #         # 环境变量
  #         github_token = os.environ['GITHUB_TOKEN']
  #         gitee_token = os.environ['GITEE_TOKEN']
  #         gitee_username = os.environ['GITEE_USERNAME']
  #         github_repo = "${{ env.GITHUB_REPO }}"
  #         gitee_repo = "${{ env.GITEE_REPO }}"
          
  #         # API URLs
  #         github_api = f"https://api.github.com/repos/{github_repo}/releases"
  #         gitee_api = f"https://gitee.com/api/v5/repos/{gitee_repo}/releases"
          
  #         # 设置请求头
  #         github_headers = {
  #             "Authorization": f"token {github_token}",
  #             "Accept": "application/vnd.github.v3+json"
  #         }
          
  #         gitee_headers = {
  #             "Content-Type": "application/json;charset=UTF-8"
  #         }
          
  #         # 获取GitHub Releases
  #         print("获取GitHub Releases...")
  #         github_response = requests.get(github_api, headers=github_headers)
  #         github_releases = github_response.json()
          
  #         if not isinstance(github_releases, list):
  #             print(f"获取GitHub Releases失败: {github_response.text}")
  #             exit(1)
          
  #         # 获取Gitee分支信息，确认默认分支
  #         try:
  #             branches_api = f"https://gitee.com/api/v5/repos/{gitee_repo}/branches"
  #             branches_params = {"access_token": gitee_token}
  #             branches_response = requests.get(branches_api, params=branches_params)
  #             branches_data = branches_response.json()
              
  #             # 尝试找到main或master分支
  #             default_branch = "main"  # 默认假设为main
  #             if isinstance(branches_data, list):
  #                 branch_names = [branch['name'] for branch in branches_data]
  #                 if 'main' in branch_names:
  #                     default_branch = 'main'
  #                 elif 'master' in branch_names:
  #                     default_branch = 'master'
              
  #             print(f"使用默认分支: {default_branch}")
  #         except Exception as e:
  #             print(f"获取分支信息失败，使用默认分支 'main': {str(e)}")
  #             default_branch = "main"
              
  #         # 获取Gitee已有Releases
  #         gitee_params = {
  #             "access_token": gitee_token,
  #             "page": 1,
  #             "per_page": 100
  #         }
          
  #         gitee_response = requests.get(gitee_api, params=gitee_params)
  #         gitee_releases = gitee_response.json()
          
  #         if not isinstance(gitee_releases, list):
  #             print(f"获取Gitee Releases失败: {gitee_response.text}")
  #             gitee_releases = []
          
  #         # 提取Gitee已有Release标签
  #         gitee_tags = [release['tag_name'] for release in gitee_releases]
          
  #         # 同步Releases
  #         for release in github_releases:
  #             tag_name = release['tag_name']
              
  #             if tag_name in gitee_tags:
  #                 print(f"跳过已存在的Release: {tag_name}")
  #                 continue
              
  #             print(f"处理Release: {tag_name}")
              
  #             # 准备Gitee Release数据，添加target_commitish参数
  #             release_data = {
  #                 "access_token": gitee_token,
  #                 "tag_name": tag_name,
  #                 "name": release['name'] or tag_name,
  #                 "body": release['body'] or "",
  #                 "prerelease": release['prerelease'],
  #                 "target_commitish": default_branch  # 添加缺失的参数
  #             }
              
  #             # 创建Gitee Release
  #             print(f"创建Gitee Release: {tag_name} (基于 {default_branch} 分支)")
  #             response = requests.post(gitee_api, json=release_data)
              
  #             if response.status_code not in [201, 200]:
  #                 print(f"创建Release失败: {response.text}")
  #                 continue
                  
  #             gitee_release = response.json()
              
  #             # 处理资产文件
  #             if release['assets']:
  #                 print(f"开始上传资产文件...")
                  
  #                 for asset in release['assets']:
  #                     asset_name = asset['name']
  #                     asset_url = asset['browser_download_url']
  #                     print(f"处理资产: {asset_name}, URL: {asset_url}")
                      
  #                     try:
  #                         # 下载资产文件
  #                         asset_response = requests.get(asset_url, headers=github_headers)
  #                         with open(asset_name, 'wb') as f:
  #                             f.write(asset_response.content)
                          
  #                         # 上传到Gitee
  #                         upload_url = f"{gitee_api}/{gitee_release['id']}/assets"
  #                         files = {'file': (asset_name, open(asset_name, 'rb'))}
  #                         upload_data = {
  #                             'access_token': gitee_token,
  #                             'name': asset_name
  #                         }
                          
  #                         upload_response = requests.post(upload_url, data=upload_data, files=files)
  #                         if upload_response.status_code not in [201, 200]:
  #                             print(f"上传资产失败: {upload_response.text}")
  #                         else:
  #                             print(f"资产 {asset_name} 上传成功")
  #                     except Exception as e:
  #                         print(f"处理资产 {asset_name} 失败: {str(e)}")
  #                     finally:
  #                         # 删除临时文件
  #                         if os.path.exists(asset_name):
  #                             os.remove(asset_name)
              
  #             # 避免API频率限制
  #             time.sleep(2)
              
  #         print("同步GitHub Releases到Gitee完成")
  #         EOF
          
  #         python sync_releases.py